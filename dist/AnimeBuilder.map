{"version":3,"sources":["AnimeBuilder.js"],"names":["AnimeBuilder","constructor","animeConfig","animeRules","animeBuilderId","totalDuration","tempDur","propDurationMap","Map","DEFAULT_VALUES","scaleX","scaleY","add","propertySet","propKey","propVal","Object","entries","diffDur","_getDurationDiff","_addPlaceholderProp","_addToPropDurMap","hasOwnProperty","slice","durSum","_getDurationPropValSum","forEach","val","push","duration","_getHighestDurFromMap","_calcDurSum","property","propValArr","sumDurObj","reduce","p1","p2","dur1","dur2","_getCurrentDuration","has","get","propVals","durObj","v1","v2","undefined","Error","value","_checkSumEquality","compareDur","durationMap","highestDur","values","_updatePropDurMap","propDurationSum","set","onUpdate","callback","update","extractAnimeRules","getDefaultValues","getDefaultValue","generateAnime","assign"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AAEe,MAAMA,YAAN,CAAmB;AAChCC,EAAAA,WAAW,CAACC,WAAW,GAAG,EAAf,EAAmB;AAC5B,SAAKC,UAAL,GAAkB;AAChBC,MAAAA,cAAc,EAAE,IADA,CACmB;;AADnB,KAAlB;AAGA,SAAKF,WAAL,GAAmBA,WAAnB;AACA,SAAKG,aAAL,GAAqB,CAArB,CAL4B,CAM5B;AACA;;AACA,SAAKC,OAAL,GAAe,CAAf;AACA,SAAKC,eAAL,GAAuB,IAAIC,GAAJ,EAAvB;AACA,SAAKC,cAAL,GAAsB;AACpBC,MAAAA,MAAM,EAAE,CADY;AAEpBC,MAAAA,MAAM,EAAE;AAFY,KAAtB;AAID;;AAEDC,EAAAA,GAAG,CAACC,WAAD,EAAc;AAEf;AAEA;AAEA,SAAK,IAAI,CAACC,OAAD,EAAUC,OAAV,CAAT,IAA+BC,MAAM,CAACC,OAAP,CAAeJ,WAAf,CAA/B,EAA4D;AAE1D;AAEA,UAAIK,OAAO,GAAG,KAAKC,gBAAL,CAAsBL,OAAtB,CAAd,CAJ0D,CAM1D;;;AACA,UAAII,OAAO,GAAG,CAAd,EAAiB;AACf,aAAKE,mBAAL,CAAyBN,OAAzB,EAAkCI,OAAlC;;AACA,aAAKG,gBAAL,CAAsBP,OAAtB,EAA+BI,OAA/B;AACD;;AAAA;;AAED,UAAI,CAAC,KAAKf,UAAL,CAAgBmB,cAAhB,CAA+BR,OAA/B,CAAL,EAA8C;AAC5C,aAAKX,UAAL,CAAgBW,OAAhB,IAA2BC,OAAO,CAACQ,KAAR,CAAc,CAAd,CAA3B;;AACA,YAAIC,MAAM,GAAG,KAAKC,sBAAL,CAA4BV,OAAO,CAACQ,KAAR,CAAc,CAAd,CAA5B,CAAb;;AACA,aAAKF,gBAAL,CAAsBP,OAAtB,EAA+BU,MAA/B;AACD,OAJD,MAIO;AACLT,QAAAA,OAAO,CAACW,OAAR,CAAiBC,GAAD,IAAS;AACvB,eAAKxB,UAAL,CAAgBW,OAAhB,EAAyBc,IAAzB,CAA8BD,GAA9B;;AACA,eAAKN,gBAAL,CAAsBP,OAAtB,EAA+Ba,GAAG,CAACE,QAAnC;AACD,SAHD;AAID,OArByD,CAuB1D;;AACD;;AAED,SAAKxB,aAAL,GAAqB,KAAKyB,qBAAL,CAA2B,KAAKvB,eAAhC,CAArB;AAEA,WAAO,IAAP;AACD;AAEH;;;;;;AAIEwB,EAAAA,WAAW,CAACC,QAAD,EAAW;AACpB,QAAIC,UAAU,GAAG,KAAK9B,UAAL,CAAgB6B,QAAhB,CAAjB;AAEA,QAAIE,SAAS,GAAGD,UAAU,CAACE,MAAX,CAAkB,CAACC,EAAD,EAAKC,EAAL,KAAY;AAC5C,UAAIC,IAAI,GAAIF,EAAE,CAACP,QAAJ,GAAgBO,EAAE,CAACP,QAAnB,GAA8B,CAAzC;AACA,UAAIU,IAAI,GAAIF,EAAE,CAACR,QAAJ,GAAgBQ,EAAE,CAACR,QAAnB,GAA8B,CAAzC;AACA,aAAO;AAACA,QAAAA,QAAQ,EAAES,IAAI,GAAGC;AAAlB,OAAP;AACD,KAJe,EAIb,CAJa,CAAhB;AAMA,WAAOL,SAAS,CAACL,QAAjB;AACD;;AAEDW,EAAAA,mBAAmB,CAACR,QAAD,EAAW;AAC5B,QAAG,CAAC,KAAKzB,eAAL,CAAqBkC,GAArB,CAAyBT,QAAzB,CAAJ,EAAwC;AAAE,aAAO,CAAP;AAAU;;AAAA;AACnD,WAAO,KAAKzB,eAAL,CAAqBmC,GAArB,CAAyBV,QAAzB,CAAP;AACF;AAED;;;;;;AAIAP,EAAAA,sBAAsB,CAACkB,QAAD,EAAW;AAC/B,QAAIC,MAAM,GAAGD,QAAQ,CAACR,MAAT,CAAgB,CAACU,EAAD,EAAKC,EAAL,KAAY;AACvC,UAAI,CAACD,EAAE,CAAChB,QAAJ,IAAgBkB,SAAhB,IAA6B,CAACD,EAAE,CAACjB,QAAJ,IAAgBkB,SAAjD,EAA4D;AAAE,cAAM,IAAIC,KAAJ,CAAW,gDAA+CL,QAAS,EAAnE,CAAN;AAA4E;;AAC1I,aAAO;AAACd,QAAAA,QAAQ,EAAEgB,EAAE,CAAChB,QAAH,GAAciB,EAAE,CAACjB;AAA5B,OAAP;AACD,KAHY,EAGV;AAACA,MAAAA,QAAQ,EAAE;AAAX,KAHU,CAAb;AAKA,WAAOe,MAAM,CAACf,QAAd;AACD;;AAEDV,EAAAA,gBAAgB,CAACa,QAAD,EAAW;AACzB,QAAId,OAAO,GAAG,KAAKb,aAAL,GAAqB,KAAKmC,mBAAL,CAAyBR,QAAzB,CAAnC;;AACA,QAAId,OAAO,GAAG,CAAd,EAAiB;AAAE,YAAM,IAAI8B,KAAJ,CAAW,YAAWhB,QAAS,sGAA/B,CAAN;AAA4I;;AAE/J,WAAOd,OAAP;AACD;AAED;;;;;;;;;AAOAE,EAAAA,mBAAmB,CAACY,QAAD,EAAWH,QAAX,EAAqB;AACtC,QAAI,KAAK1B,UAAL,CAAgB6B,QAAhB,KAA6Be,SAAjC,EAA4C;AAC1C,WAAK5C,UAAL,CAAgB6B,QAAhB,IAA4B,EAA5B;AACD;;AAED,SAAK7B,UAAL,CAAgB6B,QAAhB,EAA0BJ,IAA1B,CAA+B;AAC7BqB,MAAAA,KAAK,EAAE,KADsB;AAE7BpB,MAAAA,QAAQ,EAAEA;AAFmB,KAA/B;AAID;AAED;;;;;;;;;;AAQAqB,EAAAA,iBAAiB,CAACrC,WAAD,EAAc;AAC7B,QAAIsC,UAAU,GAAG,CAAC,CAAlB;;AAEA,SAAK,IAAI,CAACrC,OAAD,EAAU6B,QAAV,CAAT,IAAgC3B,MAAM,CAACC,OAAP,CAAeJ,WAAf,CAAhC,EAA6D;AAC3D,UAAIsC,UAAU,GAAG,CAAjB,EAAoB;AAClBA,QAAAA,UAAU,GAAG,KAAK1B,sBAAL,CAA4BkB,QAA5B,CAAb;AACD,OAFD,MAEO;AACL,YAAIQ,UAAU,KAAK,KAAK1B,sBAAL,CAA4BkB,QAA5B,CAAnB,EAA0D;AACxD,iBAAO,KAAP;AACD;AACF;AACF;;AAED,WAAO,IAAP;AACD;AAED;;;;;;AAIAb,EAAAA,qBAAqB,CAACsB,WAAD,EAAc;AACjC,QAAIC,UAAU,GAAG,CAAjB;;AAEA,SAAK,IAAIxB,QAAT,IAAqBuB,WAAW,CAACE,MAAZ,EAArB,EAA2C;AACzC,UAAIzB,QAAQ,GAAGwB,UAAf,EAA2B;AAAEA,QAAAA,UAAU,GAAGxB,QAAb;AAAuB;AACrD;;AAED,WAAOwB,UAAP;AACD;;AAEDE,EAAAA,iBAAiB,CAACvB,QAAD,EAAW;AAC1B,QAAI,CAACA,QAAL,EAAe;AAAE,YAAM,IAAIgB,KAAJ,CAAW,YAAWhB,QAAS,eAA/B,CAAN;AAAqD;;AAEtE,QAAIwB,eAAe,GAAG,KAAKzB,WAAL,CAAiBC,QAAjB,CAAtB;;AACA,QAAIwB,eAAe,GAAG,KAAKlD,OAA3B,EAAoC;AAAE,WAAKA,OAAL,GAAekD,eAAf;AAAgC;;AAAA;;AAEtE,SAAKnC,gBAAL,CAAsBW,QAAtB,EAAgCwB,eAAhC;AACD;;AAEDnC,EAAAA,gBAAgB,CAACW,QAAD,EAAWH,QAAX,EAAqB;AACnC,QAAI,KAAKtB,eAAL,CAAqBkC,GAArB,CAAyBT,QAAzB,CAAJ,EAAwC;AACrC,WAAKzB,eAAL,CAAqBkD,GAArB,CAAyBzB,QAAzB,EAAmC,KAAKzB,eAAL,CAAqBmC,GAArB,CAAyBV,QAAzB,IAAqCH,QAAxE;AACA;AACF;;AAED,SAAKtB,eAAL,CAAqBkD,GAArB,CAAyBzB,QAAzB,EAAmCH,QAAnC;AACD,GAvK+B,CAyKhC;;;AACA6B,EAAAA,QAAQ,CAACC,QAAD,EAAW;AACjB,SAAKzD,WAAL,CAAiB0D,MAAjB,GAA0BD,QAA1B;AAEA,WAAO,IAAP;AACD,GA9K+B,CAgLhC;;;AACAE,EAAAA,iBAAiB,GAAG;AAClB,WAAO,KAAK1D,UAAZ;AACD;;AAED2D,EAAAA,gBAAgB,GAAG;AACjB,WAAO,KAAKrD,cAAZ;AACD;;AAEDsD,EAAAA,eAAe,CAAC/B,QAAD,EAAW;AACxB,QAAI,KAAKvB,cAAL,CAAoBuB,QAApB,CAAJ,EAAmC;AACjC,aAAO,KAAKvB,cAAL,CAAoBuB,QAApB,CAAP;AACD;;AAED,WAAO,CAAP;AACD;;AAEDgC,EAAAA,aAAa,GAAG;AACd,WAAO,sBAAMhD,MAAM,CAACiD,MAAP,CAAc,KAAK/D,WAAnB,EAAgC,KAAKC,UAArC,CAAN,CAAP;AACD;;AAnM+B","file":"AnimeBuilder.map","sourceRoot":"..\\src\\js","sourcesContent":["import anime from 'animejs';\r\n\r\nexport default class AnimeBuilder {\r\n  constructor(animeConfig = {}) {\r\n    this.animeRules = {\r\n      animeBuilderId: true               // Identifies this as a ruleset built by an AnimeBuilder\r\n    };\r\n    this.animeConfig = animeConfig;\r\n    this.totalDuration = 0;\r\n    // This will be updated more often than totalDuration.\r\n    // totalduration is read too often so it needs a temp storage\r\n    this.tempDur = 0;\r\n    this.propDurationMap = new Map();\r\n    this.DEFAULT_VALUES = {\r\n      scaleX: 1,\r\n      scaleY: 1\r\n    }\r\n  }\r\n  \r\n  add(propertySet) {\r\n    \r\n    // TODO get this to work with extracted properties, animeBuilders and animeObjects\r\n    \r\n    //if (!this._checkSumEquality(propertySet)) { throw new Error(`Each property in the added property-set needs to have equal total durations: ${JSON.stringify([...this.propDurationMap])} `)};\r\n\r\n    for (let [propKey, propVal] of Object.entries(propertySet)) {\r\n\r\n      // After all props have been added\r\n\r\n      let diffDur = this._getDurationDiff(propKey);\r\n\r\n      // Add placeholder if there is a duration difference\r\n      if (diffDur > 0) {\r\n        this._addPlaceholderProp(propKey, diffDur);\r\n        this._addToPropDurMap(propKey, diffDur);\r\n      };\r\n\r\n      if (!this.animeRules.hasOwnProperty(propKey)) {\r\n        this.animeRules[propKey] = propVal.slice(0);\r\n        let durSum = this._getDurationPropValSum(propVal.slice(0));\r\n        this._addToPropDurMap(propKey, durSum);\r\n      } else {\r\n        propVal.forEach((val) => {\r\n          this.animeRules[propKey].push(val);\r\n          this._addToPropDurMap(propKey, val.duration);\r\n        });\r\n      }\r\n\r\n      //this._updatePropDurMap(propKey);\r\n    }\r\n\r\n    this.totalDuration = this._getHighestDurFromMap(this.propDurationMap);\r\n    \r\n    return this;\r\n  }\r\n\r\n/**\r\n * Calculates the duration sum of a property (translateX, translateY, scaleX, etc...)\r\n * @param {*} property - animation css property such as (translateX, translateY, scaleX, etc...)\r\n */\r\n  _calcDurSum(property) {\r\n    let propValArr = this.animeRules[property];\r\n\r\n    let sumDurObj = propValArr.reduce((p1, p2) => {\r\n      let dur1 = (p1.duration) ? p1.duration : 0;\r\n      let dur2 = (p2.duration) ? p2.duration : 0;\r\n      return {duration: dur1 + dur2};\r\n    }, 0);\r\n\r\n    return sumDurObj.duration;\r\n  }\r\n\r\n  _getCurrentDuration(property) {\r\n    if(!this.propDurationMap.has(property)) { return 0 };\r\n     return this.propDurationMap.get(property);\r\n  }\r\n\r\n  /**\r\n   * Sums up all of the duration of an array of prop values\r\n   * @param {Array} propVals - An array of property values\r\n   */\r\n  _getDurationPropValSum(propVals) {\r\n    let durObj = propVals.reduce((v1, v2) => {\r\n      if (!v1.duration == undefined || !v2.duration == undefined) { throw new Error(`All propvals must have a duration. Propvals: ${propVals}`)}\r\n      return {duration: v1.duration + v2.duration};\r\n    }, {duration: 0});\r\n\r\n    return durObj.duration\r\n  }\r\n\r\n  _getDurationDiff(property) {\r\n    let diffDur = this.totalDuration - this._getCurrentDuration(property);\r\n    if (diffDur < 0) { throw new Error(`Property ${property} has a negitive duration difference, which is not allowed. Please check all added property durations`)}\r\n\r\n    return diffDur;\r\n  }\r\n\r\n  /**\r\n   * Adds a new propertyValue with the inputed duration.\r\n   * The placeholder properties value will either be the current\r\n   * value, or if no current value exists, the default value.\r\n   * @param {*} property - The property to add the new placeholder to\r\n   * @param {Number} duration - The duration of that placeholder property\r\n   */\r\n  _addPlaceholderProp(property, duration) {\r\n    if (this.animeRules[property] == undefined) {\r\n      this.animeRules[property] = [];\r\n    }\r\n\r\n    this.animeRules[property].push({\r\n      value: '*=1',\r\n      duration: duration\r\n    });\r\n  }\r\n \r\n  /**\r\n   * Checks if the sum of each property's duration values\r\n   * is equivalent to each other. \r\n   * \r\n   * returns true if they are all are equal\r\n   * @param {Object} propertySet - Object of 1 to many properties\r\n   * @return {boolean}\r\n   */\r\n  _checkSumEquality(propertySet) {\r\n    let compareDur = -1;\r\n\r\n    for (let [propKey, propVals] of Object.entries(propertySet)) {   \r\n      if (compareDur < 0) {\r\n        compareDur = this._getDurationPropValSum(propVals);\r\n      } else {\r\n        if (compareDur !== this._getDurationPropValSum(propVals)) {\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * \r\n   * @param {*} durationMap - a propDurationMap, map linking props to their total durations\r\n   */\r\n  _getHighestDurFromMap(durationMap) {\r\n    let highestDur = 0;\r\n\r\n    for (let duration of durationMap.values()) {   \r\n      if (duration > highestDur) { highestDur = duration }\r\n    }\r\n\r\n    return highestDur;\r\n  }\r\n\r\n  _updatePropDurMap(property) {\r\n    if (!property) { throw new Error(`Property ${property} is undefined`)}\r\n\r\n    let propDurationSum = this._calcDurSum(property);\r\n    if (propDurationSum > this.tempDur) { this.tempDur = propDurationSum };\r\n\r\n    this._addToPropDurMap(property, propDurationSum);\r\n  }\r\n\r\n  _addToPropDurMap(property, duration) {\r\n    if (this.propDurationMap.has(property)) {\r\n       this.propDurationMap.set(property, this.propDurationMap.get(property) + duration);\r\n       return;\r\n    }\r\n\r\n    this.propDurationMap.set(property, duration);\r\n  }\r\n\r\n  // adds functions that happens on every animation update\r\n  onUpdate(callback) {\r\n    this.animeConfig.update = callback;\r\n    \r\n    return this;\r\n  }\r\n  \r\n  // Returns the raw pre generated ruleset\r\n  extractAnimeRules() {\r\n    return this.animeRules;\r\n  }\r\n\r\n  getDefaultValues() {\r\n    return this.DEFAULT_VALUES;\r\n  }\r\n\r\n  getDefaultValue(property) {\r\n    if (this.DEFAULT_VALUES[property]) {\r\n      return this.DEFAULT_VALUES[property];\r\n    }\r\n\r\n    return 0;\r\n  }\r\n  \r\n  generateAnime() {\r\n    return anime(Object.assign(this.animeConfig, this.animeRules));\r\n  }\r\n}"]}